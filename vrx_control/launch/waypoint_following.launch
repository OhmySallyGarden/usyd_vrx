<?xml version="1.0"?>
<launch>
  <include file="$(find vrx_control)/launch/low_level_control.launch"/>
  <node  name="wamv_waypoint_follow" pkg="vrx_control" type="navigate_wamv.py" output="screen">
    <param name="~speed" value="0.5"/> <!-- Target forwards speed -->
    <param name="~use_nlgl" value="True"/> <!-- Whether to use Non-Linear Guidance Law (reccomended) -->
    <param name="~nlgl_radius" value="4.0"/> <!-- The radius for NLGL. Smaller values turn the vessel more sharpely to the path -->
    <param name="~tolerance" value="2.0"/> <!-- The tolerance at which to accept a waypoint is hit -->
    <param name="~speed_control" value="False"/> <!-- Whether to use speed control - in dev, not reccomended -->
    <param name="~braking_distance" value="4.0"/> <!-- The braking distance use with speed control -->
    <param name="~minimum_forwards_speed" value="0.1"/> <!-- The minimum forwards speed when using speed control -->
    <param name="~request_mode" value="hard"/> <!-- Options 'hard' or 'soft'. Hard reaches the waypoint at all costs. Soft will request new waypoints if it veers to far from the path or misses a waypoints -->
  </node>


  <!-- Publishes static transforms (gps, imu, cameras, etc) to /tf -->
  <node ns="wamv" pkg="robot_state_publisher" type="robot_state_publisher" name="rob_st_pub">
    <param name="tf_prefix" value="wamv" />
  </node>

  <!-- Kalman filter fusing imu and gps into combined odometry/tf -->
  <node ns="wamv/robot_localization" pkg="robot_localization" type="ekf_localization_node"
        name="ekf_localization" clear_params="false">
    <param name="sensor_timeout" value="2.0"/>
    <param name="two_d_mode" value="false"/>
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="wamv/odom"/>
    <param name="base_link_frame" value="wamv/base_link"/>
    <param name="world_frame" value="wamv/odom"/>
    <param name="publish_tf" value="true"/>
    <param name="frequency" value="60"/>
    <param name="imu0" value="/sensors/imu/imu/data"/>
    <!-- IMU measures orientation, angular velocity, and linear acceleration -->
    <rosparam param="imu0_config">[false, false, false,
                                   true,  true,  true,
                                   false,  false,  false,
                                   true,  true,  true,
                                   true,  true,  true]</rosparam>
    <param name="imu0_differential" value="false"/>
    <param name="imu0_remove_gravitational_acceleration" value="true"/>

    <param name="odom0" value="/wamv/robot_localization/odometry/gps"/>
    <!-- GPS only reliably measures absolute position -->
    <rosparam param="odom0_config">[true,  true,  true,
                                   false, false, false,
                                   false, false, false,
                                   false, false, false,
                                   false, false, false]</rosparam>

    <param name="odom0_differential" value="false"/>
    <param name="smooth_lagged_data" value="true"/>
  </node>

  <!-- Produces local odometry from GPS to be used in Kalman filter -->
  <node ns="wamv/robot_localization" pkg="robot_localization" type="navsat_transform_node"
        name="navsat_transform_node" respawn="true" output="screen">
    <param name="tf_prefix" value="wamv" />       
    <param name="frequency" value="60"/>
    <param name="magnetic_declination_radians" value="0"/>
    <param name="broadcast_utm_transform" value="true"/>
    <param name="wait_for_datum" value="true"/>
    <param name="use_odometry_yaw" value="true"/>
    <rosparam param="datum">[21.30996, -157.8901]</rosparam>
    <param name="yaw_offset" value="0"/>
    <param name="publish_filtered_gps" value="true"/>
    <remap to="/wamv/sensors/gps/gps/fix" from="/robot_localization/gps/fix" />
  </node>


</launch>
